name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # every week (for --pre release tests)

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - run: uvx check-manifest

  test_uv:
    name: Test UV (${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.backend }})
    runs-on: ${{ matrix.os }}
    env:
      UV_NO_SYNC: "1"
      UV_MANAGED_PYTHON: "1"
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        backend: [PySide6, PyQt6]
        include:
          - os: windows-latest
            python-version: "3.10"
            backend: PySide2
          - os: windows-latest
            python-version: "3.11"
            backend: PySide6
          - os: windows-latest
            python-version: "3.12"
            backend: PyQt6
          - os: macos-13
            python-version: "3.10"
            backend: PySide2
          - os: macos-13
            python-version: "3.10"
            backend: PyQt5

    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - run: uv sync --no-dev --group test --extra ${{ matrix.backend }}
      - uses: pyvista/setup-headless-display-action@v4

      - name: Test
        run: uv run coverage run -p -m pytest -v --color=yes

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: covreport-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.backend }}
          path: ./.coverage*
          include-hidden-files: true

#  test:
#    name: Test
#    uses: pyapp-kit/workflows/.github/workflows/test-pyrepo.yml@v2
#    secrets:
#      codecov_token: ${{ secrets.CODECOV_TOKEN }}
#    with:
#      os: ${{ matrix.platform }}
#      python-version: ${{ matrix.python-version }}
#      qt: ${{ matrix.backend }}
#      pip-install-pre-release: ${{ github.event_name == 'schedule' }}
#      extras: 'test'
#      coverage-upload: artifact
#
#    strategy:
#      fail-fast: false
#      matrix:
#        platform: [ubuntu-latest, windows-latest, macos-latest]
#        python-version: ["3.9", "3.10", "3.11", "3.12"]
#        backend: [pyside2, pyqt5, pyqt6, pyside6]
#        exclude:
#          # Abort (core dumped) on linux pyqt6, unknown reason
#          - platform: ubuntu-latest
#            backend: pyqt6
#          # lack of wheels for pyside2 on MacOS
#          - platform: macos-latest
#            backend: pyside2
#          # lack of wheels for pyside2/py3.11
#          - python-version: "3.9"
#            backend: pyside2
#          - python-version: "3.10"
#            backend: pyside2
#          - python-version: "3.11"
#            backend: pyside2
#          - python-version: "3.12"
#            backend: pyside2
#          - python-version: "3.12"
#            backend: pyqt5
#          # super slow
#          - python-version: "3.13"
#            backend: pyqt6
#            platform: windows-latest
#        include:
##          - python-version: "3.13"
##            platform: windows-latest
##            backend: "pyqt6"
#          - python-version: "3.13"
#            platform: ubuntu-latest
#            backend: "pyqt6"
#          - python-version: "3.10"
#            platform: macos-latest
#            backend: "'pyside6<6.8'"
#          - python-version: "3.11"
#            platform: macos-latest
#            backend: "'pyside6<6.8'"
#          - python-version: "3.10"
#            platform: windows-latest
#            backend: "'pyside6<6.8'"
#          - python-version: "3.12"
#            platform: windows-latest
#            backend: "'pyside6<6.8'"
#          # legacy Qt
#          - python-version: 3.9
#            platform: ubuntu-latest
#            backend: "pyqt5==5.12.*"
#          - python-version: 3.9
#            platform: ubuntu-latest
#            backend: "pyqt5==5.13.*"
#          - python-version: 3.9
#            platform: ubuntu-latest
#            backend: "pyqt5==5.14.*"

#  # now add another job to combine and upload the coverage
#  upload_coverage:
#    if: always()
#    needs: [test]
#    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
#    secrets:
#      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  # before we submit to PyPi, let's test that it gets built correctly and we can submit to TestPyPi
  deploy_test:
    name: Deploy to PyPI (test)
    needs: [test_uv, check-manifest]
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          python -m pip install --upgrade pip
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  deploy:
    name: Deploy
    needs: deploy_test
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true